"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const http_1 = require("http");
const utils_1 = require("./utils");
class ErrorReport extends Error {
    constructor({ kind, message, originalError, tryToParseError = false }) {
        var _a, _b, _c;
        super(message);
        this.kind = kind;
        this.originalError = originalError;
        this.errorId = crypto_1.randomBytes(16).toString('hex');
        this.stack = originalError.stack;
        this.errorDetails = ErrorReport.getRequestErrorMetadata(this.originalError);
        if (tryToParseError) {
            if ((_c = (_b = (_a = this.errorDetails) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.message) {
                this.message = this.errorDetails.response.data.message;
            }
            else {
                this.message = this.originalError.message;
            }
        }
    }
    static create(args) {
        var _a, _b, _c, _d;
        const kind = (_a = args.kind) !== null && _a !== void 0 ? _a : this.createGenericErrorKind(args.originalError);
        const message = (_b = args.message) !== null && _b !== void 0 ? _b : (_c = args.originalError) === null || _c === void 0 ? void 0 : _c.message;
        const tryToParseError = (_d = args.tryToParseError) !== null && _d !== void 0 ? _d : true;
        return new ErrorReport({
            kind,
            message,
            originalError: args.originalError,
            tryToParseError,
        });
    }
    static createGenericErrorKind(error) {
        if (error.config) {
            return "RequestError" /* REQUEST_ERROR */;
        }
        return "GenericError" /* GENERIC_ERROR */;
    }
    static getRequestErrorMetadata(err) {
        if (!err.config) {
            return null;
        }
        const { url, method, headers: requestHeaders, params, data: requestData, timeout: requestTimeout } = err.config;
        const { status, statusText, headers: responseHeaders, data: responseData } = err.response || {};
        return {
            requestConfig: {
                data: requestData,
                headers: requestHeaders,
                method,
                params,
                timeout: requestTimeout,
                url,
            },
            response: err.response
                ? {
                    ...(responseData instanceof http_1.IncomingMessage ? { data: '[IncomingMessage]' } : { data: responseData }),
                    headers: responseHeaders,
                    status,
                    statusText,
                }
                : undefined,
        };
    }
    toObject(objectDepth = ErrorReport.DEFAULT_MAX_OBJECT_DEPTH) {
        return utils_1.truncateStringsFromObject({
            errorDetails: this.errorDetails,
            errorId: this.errorId,
            kind: this.kind,
            message: this.message,
            stack: this.stack,
            ...(this.originalError.code ? { code: this.originalError.code } : null),
        }, ErrorReport.MAX_ERROR_STRING_LENGTH, objectDepth);
    }
}
exports.ErrorReport = ErrorReport;
ErrorReport.MAX_ERROR_STRING_LENGTH = process.env.MAX_ERROR_STRING_LENGTH
    ? parseInt(process.env.MAX_ERROR_STRING_LENGTH, 10)
    : 8 * 1024;
ErrorReport.DEFAULT_MAX_OBJECT_DEPTH = 6;
